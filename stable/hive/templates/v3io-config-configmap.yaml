apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-v3io-config
  labels:
    app: {{ template "hive.name" . }}
    chart: {{ template "hive.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{ include "v3io-configs.java.configMap" . | indent 2 }}

  health_check.sh: |
{{ include "v3io-configs.script.javaHealthCheck" . | indent 4 }}

  v3io-hive.sh: |
    #!/usr/bin/env bash
    set -e

    echo alias ll=\"ls -lah --color\" >> ~/.bash_aliases

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    V3IO_HIVE_CONFIG={{ .Values.configPath }}
    mkdir -p $V3IO_HIVE_CONFIG

    cp -r $HIVE_HOME/conf/* $V3IO_HIVE_CONFIG/
    cp {{ .Values.global.v3io.configMountPath }}/hive-site.xml $V3IO_HIVE_CONFIG/

    # Not working with 1.9.x, please uncomment for 2.0 once it ready.
    #cp {{ .Values.global.v3io.configMountPath }}/core-site.xml $V3IO_HIVE_CONFIG/

    # Initialize Hive metastore database
    # Check if schema does not exists or invalid, then try to initialize Hive metastore database schema
    set +e
    $HIVE_HOME/bin/schematool -dbType $HIVE_DB_TYPE -validate
    RC=$?
    set -e
    if [ $RC != 0 ]; then
      echo "Hive schema didn't pass validation. RC=$RC"
      echo "Initializing Hive metastore schema..."
      $HIVE_HOME/bin/schematool -initSchema -dbType $HIVE_DB_TYPE
      RC=$?
      if [ $RC != 0 ]; then
        echo "Failed to initialize Hive metastore database schema. RC=$RC"
        exit $RC
      else
        echo "Hive metastore schema initialized successfully."
      fi
    else
      echo "Hive metastore schema already exists. Details:"
      $HIVE_HOME/bin/schematool -dbType $HIVE_DB_TYPE -info
    fi

    echo Starting hive metastore service....
    $HIVE_HOME/bin/hive --service metastore

  hive-site.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>jdbc:postgresql://{{ .Values.postgres.hostname }}:{{ .Values.postgres.port }}/{{ .Values.postgres.database }}</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>org.postgresql.Driver</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>{{ .Values.postgres.username }}</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>{{ .Values.postgres.password }}</value>
      </property>

      <property>
        <name>hive.metastore.uris</name>
        <value>thrift://{{ template "hive.fullname" . }}:{{ .Values.metastore.containerPort }}</value>
        <description>IP address (or fully-qualified domain name) and port of the metastore host</description>
      </property>

      <property>
        <name>hive.metastore.schema.verification</name>
        <value>true</value>
      </property>
    </configuration>

  core-site.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <!--
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License. See accompanying LICENSE file.
    -->

    <!-- Put site-specific property overrides in this file. -->

    <configuration>
      <property>
        <name>fs.defaultFS</name>
        <value>v3io:////</value>
        <description>The name of the default file system. A URI whose
          scheme and authority determine the FileSystem implementation. The
          uri's scheme determines the config property (fs.SCHEME.impl) naming
          the FileSystem implementation class. The uri's authority is used to
          determine the host, port, etc. for a filesystem.
        </description>
      </property>
      <property>
        <name>fs.v3io.impl</name>
        <value>io.iguaz.v3io.hcfs.V3IOHiveFileSystem</value>
      </property>
      <property>
        <name>fs.AbstractFileSystem.v3io.impl</name>
        <value>io.iguaz.v3io.hcfs.V3IOHiveAbstractFileSystem</value>
      </property>
    </configuration>
